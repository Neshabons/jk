const API_BASE = 'http://localhost:3000/api';

console.log('‚úÖ requests.js loaded');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function checkAuth() {
    const userKey = localStorage.getItem('userKey');
    const username = localStorage.getItem('currentUsername');
    console.log('üîê Auth check:', { userKey: !!userKey, username });
    return !!userKey;
}

// –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function requireAuth() {
    if (!checkAuth()) {
        alert('–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É');
        window.location.href = 'login.html';
        return false;
    }
    return true;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function getCurrentUser() {
    return localStorage.getItem('currentUsername') || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É –∑–∞—è–≤–∫–∏
function showRequestForm() {
    console.log('üìù Show request form');
    if (!requireAuth()) return; 
    
    const form = document.getElementById("request-form");
    if (form) {
        form.classList.remove("hidden");
        console.log('‚úÖ Form shown');
    }
}

// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É
async function submitRequest() {
    console.log('üì§ Submit request');
    if (!requireAuth()) return;

    const title = document.getElementById("request-title").value.trim();
    const description = document.getElementById("request-description").value.trim();
    const priority = document.getElementById("request-priority").value;

    if (!title || !description) {
        alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è.");
        return;
    }

    const userKey = localStorage.getItem('userKey');
    
    try {
        const response = await fetch(`${API_BASE}/requests`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': userKey
            },
            body: JSON.stringify({ title, description, priority })
        });

        const data = await response.json();

        if (response.ok) {
            alert('–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
            resetForm();
            await displayRequests();
        } else {
            alert('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: ' + data.error);
        }
    } catch (error) {
        console.error('Submit request error:', error);
        alert('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
    }
}

// –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
function resetForm() {
    console.log('üîÑ Reset form');
    document.getElementById("request-title").value = "";
    document.getElementById("request-description").value = "";
    document.getElementById("request-form").classList.add("hidden");
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫
async function displayRequests() {
    console.log('üìÇ Display requests');
    const container = document.getElementById("requests-container");
    if (!container) {
        console.error('‚ùå requests-container not found');
        return;
    }
    
    container.innerHTML = "";

    // –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è
    const createButton = document.getElementById('create-request-btn');
    if (createButton) {
        createButton.style.display = checkAuth() ? 'block' : 'none';
        console.log('üîÑ Create button display:', createButton.style.display);
    }

    if (!checkAuth()) {
        container.innerHTML = '<div class="no-requests">–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É</div>';
        return;
    }

    const userKey = localStorage.getItem('userKey');
    
    try {
        const response = await fetch(`${API_BASE}/requests`, {
            headers: {
                'Authorization': userKey
            }
        });

        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫');
        }

        const requests = await response.json();
        console.log('üì• Loaded requests:', requests.length);

        if (requests.length === 0) {
            container.innerHTML = '<div class="no-requests">–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç</div>';
            return;
        }

        requests.forEach(request => {
            const requestDiv = document.createElement("div");
            requestDiv.classList.add("request", `priority-${request.priority}`, `status-${request.status}`);
            
            requestDiv.innerHTML = `
                <div class="request-header">
                    <h4>${escapeHtml(request.title)}</h4>
                    <span class="status-badge status-${request.status}">${getStatusText(request.status)}</span>
                </div>
                <p>${escapeHtml(request.description)}</p>
                <div class="request-footer">
                    <div class="request-meta">
                        <small>–°–æ–∑–¥–∞–Ω–æ: ${formatDate(request.created_at)}</small>
                        <small>–ê–≤—Ç–æ—Ä: <strong>${escapeHtml(request.username)}</strong></small>
                        <small>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${getPriorityText(request.priority)}</small>
                        ${request.updated_at !== request.created_at ? 
                            `<small>–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${formatDate(request.updated_at)}</small>` : ''}
                    </div>
                    <div class="request-actions">
                        ${getCurrentUser() === request.username ? `
                            <button onclick="deleteRequest(${request.id})" class="btn-delete">–£–¥–∞–ª–∏—Ç—å</button>
                        ` : ''}
                    </div>
                </div>
            `;

            container.appendChild(requestDiv);
        });

    } catch (error) {
        console.error('Error loading requests:', error);
        container.innerHTML = '<div class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫</div>';
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
async function deleteRequest(id) {
    console.log('üóëÔ∏è Delete request:', id);
    if (!requireAuth()) return; 
    
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞—è–≤–∫—É?')) {
        return;
    }

    const userKey = localStorage.getItem('userKey');
    
    try {
        const response = await fetch(`${API_BASE}/requests/${id}`, {
            method: 'DELETE',
            headers: {
                'Authorization': userKey
            }
        });

        const data = await response.json();

        if (response.ok) {
            alert('–ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
            await displayRequests();
        } else {
            alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: ' + data.error);
        }
    } catch (error) {
        console.error('Delete request error:', error);
        alert('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getStatusText(status) {
    const statuses = {
        'new': 'üÜï –ù–æ–≤–∞—è',
        'in-progress': 'üîÑ –í —Ä–∞–±–æ—Ç–µ',
        'completed': '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞', 
        'rejected': '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞'
    };
    return statuses[status] || status;
}

function getPriorityText(priority) {
    const priorities = {
        'low': 'üü¢ –ù–∏–∑–∫–∏–π',
        'medium': 'üü° –°—Ä–µ–¥–Ω–∏–π',
        'high': 'üü† –í—ã—Å–æ–∫–∏–π',
        'critical': 'üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π'
    };
    return priorities[priority] || priority;
}

function formatDate(dateString) {
    return new Date(dateString).toLocaleString('ru-RU');
}

function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ DOM loaded in requests.js');
    displayRequests();
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
window.showRequestForm = showRequestForm;
window.submitRequest = submitRequest;
window.resetForm = resetForm;
window.deleteRequest = deleteRequest;
window.displayRequests = displayRequests;

console.log('‚úÖ requests.js initialized');