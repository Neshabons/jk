const API_BASE = window.location.origin + '/api';
console.log('API Base URL:', API_BASE);

console.log('‚úÖ requests2.js started loading');

// –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function showRequestForm() {
    console.log('üìù Show request form called');
    const form = document.getElementById("request-form");
    if (form) {
        form.classList.remove("hidden");
        console.log('‚úÖ Form shown');
    } else {
        console.error('‚ùå Form element not found');
    }
}

function submitRequest() {
    console.log('üì§ Submit request called');
    const title = document.getElementById("request-title").value.trim();
    const description = document.getElementById("request-description").value.trim();
    const priority = document.getElementById("request-priority").value;
    
    if (!title || !description) {
        alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è.");
        return;
    }
    
    console.log('üì§ Sending request:', { title, description, priority });
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    const userKey = localStorage.getItem('userKey');
    if (!userKey) {
        alert('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
        return;
    }
    
    fetch(API_BASE + '/requests', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': userKey
        },
        body: JSON.stringify({ title, description, priority })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert('–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
            resetForm();
            displayRequests();
        } else {
            alert('–û—à–∏–±–∫–∞: ' + data.error);
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
    });
}

function resetForm() {
    console.log('üîÑ Reset form called');
    document.getElementById("request-title").value = "";
    document.getElementById("request-description").value = "";
    document.getElementById("request-priority").value = "medium";
    document.getElementById("request-form").classList.add("hidden");
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞—è–≤–æ–∫
async function displayRequests() {
    console.log('üìÇ Displaying requests');
    const container = document.getElementById("requests-container");
    
    if (!container) {
        console.error('‚ùå Container not found');
        return;
    }
    
    const userKey = localStorage.getItem('userKey');
    if (!userKey) {
        container.innerHTML = '<div class="no-requests">–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É</div>';
        return;
    }
    
    try {
        const response = await fetch(API_BASE + '/requests', {
            headers: {
                'Authorization': userKey
            }
        });
        
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫');
        }
        
        const requests = await response.json();
        console.log('üì• Loaded requests:', requests);
        
        if (requests.length === 0) {
            container.innerHTML = '<div class="no-requests">–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç</div>';
            return;
        }
        
        container.innerHTML = '';
        
        requests.forEach(request => {
            const requestElement = document.createElement('div');
            requestElement.className = `request priority-${request.priority} status-${request.status}`;
            requestElement.innerHTML = `
                <div class="request-header">
                    <h4>${request.title}</h4>
                    <span class="status-badge status-${request.status}">${getStatusText(request.status)}</span>
                </div>
                <p>${request.description}</p>
                <div class="request-footer">
                    <div class="request-meta">
                        <small>–°–æ–∑–¥–∞–Ω–æ: ${new Date(request.created_at).toLocaleString('ru-RU')}</small>
                        <small>–ê–≤—Ç–æ—Ä: <strong>${request.username}</strong></small>
                        <small>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${getPriorityText(request.priority)}</small>
                    </div>
                    <div class="request-actions">
                        <button onclick="deleteRequest(${request.id})" class="btn-delete">–£–¥–∞–ª–∏—Ç—å</button>
                    </div>
                </div>
            `;
            container.appendChild(requestElement);
        });
        
    } catch (error) {
        console.error('Error loading requests:', error);
        container.innerHTML = '<div class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫</div>';
    }
}

// –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
async function deleteRequest(id) {
    if (!confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞—è–≤–∫—É?')) return;
    
    const userKey = localStorage.getItem('userKey');
    if (!userKey) return;
    
    try {
        const response = await fetch(API_BASE + '/requests/' + id, {
            method: 'DELETE',
            headers: {
                'Authorization': userKey
            }
        });
        
        const data = await response.json();
        
        if (data.success) {
            alert('–ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞');
            displayRequests();
        } else {
            alert('–û—à–∏–±–∫–∞: ' + data.error);
        }
    } catch (error) {
        console.error('Error deleting request:', error);
        alert('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getStatusText(status) {
    const statusMap = {
        'new': 'üÜï –ù–æ–≤–∞—è',
        'in-progress': 'üîÑ –í —Ä–∞–±–æ—Ç–µ',
        'completed': '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞',
        'rejected': '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞'
    };
    return statusMap[status] || status;
}

function getPriorityText(priority) {
    const priorityMap = {
        'low': 'üü¢ –ù–∏–∑–∫–∏–π',
        'medium': 'üü° –°—Ä–µ–¥–Ω–∏–π', 
        'high': 'üü† –í—ã—Å–æ–∫–∏–π',
        'critical': 'üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π'
    };
    return priorityMap[priority] || priority;
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∑–∞—è–≤–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ Page loaded, displaying requests...');
    displayRequests();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫
    const showFormBtn = document.getElementById('show-request-form-btn');
    if (showFormBtn) {
        showFormBtn.addEventListener('click', showRequestForm);
        console.log('‚úÖ Button event listener added');
    } else {
        console.error('‚ùå Show form button not found');
    }
    
    const submitBtn = document.getElementById('submit-request-btn');
    if (submitBtn) {
        submitBtn.addEventListener('click', submitRequest);
    }
    
    const cancelBtn = document.getElementById('cancel-request-btn');
    if (cancelBtn) {
        cancelBtn.addEventListener('click', resetForm);
    }
});

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
window.showRequestForm = showRequestForm;
window.submitRequest = submitRequest;
window.resetForm = resetForm;
window.displayRequests = displayRequests;
window.deleteRequest = deleteRequest;

console.log('üéâ requests2.js loaded successfully');
